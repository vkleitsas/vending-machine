// Code generated by MockGen. DO NOT EDIT.
// Source: ./vending-machine/db/init_db.go

// Package mock_db is a generated GoMock package.
package db

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockInitDBInterface is a mock of InitDBInterface interface.
type MockInitDBInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInitDBInterfaceMockRecorder
}

// MockInitDBInterfaceMockRecorder is the mock recorder for MockInitDBInterface.
type MockInitDBInterfaceMockRecorder struct {
	mock *MockInitDBInterface
}

// NewMockInitDBInterface creates a new mock instance.
func NewMockInitDBInterface(ctrl *gomock.Controller) *MockInitDBInterface {
	mock := &MockInitDBInterface{ctrl: ctrl}
	mock.recorder = &MockInitDBInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInitDBInterface) EXPECT() *MockInitDBInterfaceMockRecorder {
	return m.recorder
}

// Commit mocks base method.
func (m *MockInitDBInterface) Commit(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockInitDBInterfaceMockRecorder) Commit(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockInitDBInterface)(nil).Commit), tx)
}

// GetTransaction mocks base method.
func (m *MockInitDBInterface) GetTransaction() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockInitDBInterfaceMockRecorder) GetTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockInitDBInterface)(nil).GetTransaction))
}

// InitDB mocks base method.
func (m *MockInitDBInterface) InitDB() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitDB")
}

// InitDB indicates an expected call of InitDB.
func (mr *MockInitDBInterfaceMockRecorder) InitDB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitDB", reflect.TypeOf((*MockInitDBInterface)(nil).InitDB))
}

// NewDatabaseClient mocks base method.
func (m *MockInitDBInterface) NewDatabaseClient() (*sqlx.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewDatabaseClient")
	ret0, _ := ret[0].(*sqlx.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewDatabaseClient indicates an expected call of NewDatabaseClient.
func (mr *MockInitDBInterfaceMockRecorder) NewDatabaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewDatabaseClient", reflect.TypeOf((*MockInitDBInterface)(nil).NewDatabaseClient))
}

// Rollback mocks base method.
func (m *MockInitDBInterface) Rollback(tx *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rollback", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback.
func (mr *MockInitDBInterfaceMockRecorder) Rollback(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockInitDBInterface)(nil).Rollback), tx)
}
