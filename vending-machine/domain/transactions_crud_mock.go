// Code generated by MockGen. DO NOT EDIT.
// Source: ./vending-machine/domain/transactions_crud.go

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockTransactionsCrud is a mock of TransactionsCrud interface.
type MockTransactionsCrud struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsCrudMockRecorder
}

// MockTransactionsCrudMockRecorder is the mock recorder for MockTransactionsCrud.
type MockTransactionsCrudMockRecorder struct {
	mock *MockTransactionsCrud
}

// NewMockTransactionsCrud creates a new mock instance.
func NewMockTransactionsCrud(ctrl *gomock.Controller) *MockTransactionsCrud {
	mock := &MockTransactionsCrud{ctrl: ctrl}
	mock.recorder = &MockTransactionsCrudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsCrud) EXPECT() *MockTransactionsCrudMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockTransactionsCrud) GetProductByID(p Product, tx *sqlx.Tx) (*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", p, tx)
	ret0, _ := ret[0].(*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockTransactionsCrudMockRecorder) GetProductByID(p, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockTransactionsCrud)(nil).GetProductByID), p, tx)
}

// GetUserΒyID mocks base method.
func (m *MockTransactionsCrud) GetUserΒyID(u User, tx *sqlx.Tx) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserΒyID", u, tx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserΒyID indicates an expected call of GetUserΒyID.
func (mr *MockTransactionsCrudMockRecorder) GetUserΒyID(u, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserΒyID", reflect.TypeOf((*MockTransactionsCrud)(nil).GetUserΒyID), u, tx)
}

// UpdateProduct mocks base method.
func (m *MockTransactionsCrud) UpdateProduct(p Product, tx *sqlx.Tx) (*Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProduct", p, tx)
	ret0, _ := ret[0].(*Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProduct indicates an expected call of UpdateProduct.
func (mr *MockTransactionsCrudMockRecorder) UpdateProduct(p, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProduct", reflect.TypeOf((*MockTransactionsCrud)(nil).UpdateProduct), p, tx)
}

// UpdateUser mocks base method.
func (m *MockTransactionsCrud) UpdateUser(u User, tx *sqlx.Tx) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", u, tx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockTransactionsCrudMockRecorder) UpdateUser(u, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockTransactionsCrud)(nil).UpdateUser), u, tx)
}
