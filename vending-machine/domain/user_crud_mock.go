// Code generated by MockGen. DO NOT EDIT.
// Source: ./vending-machine/domain/user_crud.go

// Package mock_domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
)

// MockUserCrud is a mock of UserCrud interface.
type MockUserCrud struct {
	ctrl     *gomock.Controller
	recorder *MockUserCrudMockRecorder
}

// MockUserCrudMockRecorder is the mock recorder for MockUserCrud.
type MockUserCrudMockRecorder struct {
	mock *MockUserCrud
}

// NewMockUserCrud creates a new mock instance.
func NewMockUserCrud(ctrl *gomock.Controller) *MockUserCrud {
	mock := &MockUserCrud{ctrl: ctrl}
	mock.recorder = &MockUserCrudMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserCrud) EXPECT() *MockUserCrudMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockUserCrud) CreateUser(user User, tx *sqlx.Tx) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user, tx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockUserCrudMockRecorder) CreateUser(user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockUserCrud)(nil).CreateUser), user, tx)
}

// GetUserByUsername mocks base method.
func (m *MockUserCrud) GetUserByUsername(user User, tx *sqlx.Tx) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUsername", user, tx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUsername indicates an expected call of GetUserByUsername.
func (mr *MockUserCrudMockRecorder) GetUserByUsername(user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUsername", reflect.TypeOf((*MockUserCrud)(nil).GetUserByUsername), user, tx)
}

// GetUserΒyID mocks base method.
func (m *MockUserCrud) GetUserΒyID(user User, tx *sqlx.Tx) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserΒyID", user, tx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserΒyID indicates an expected call of GetUserΒyID.
func (mr *MockUserCrudMockRecorder) GetUserΒyID(user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserΒyID", reflect.TypeOf((*MockUserCrud)(nil).GetUserΒyID), user, tx)
}

// UpdateUser mocks base method.
func (m *MockUserCrud) UpdateUser(user User, tx *sqlx.Tx) (*User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", user, tx)
	ret0, _ := ret[0].(*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUserCrudMockRecorder) UpdateUser(user, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUserCrud)(nil).UpdateUser), user, tx)
}
